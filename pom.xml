<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

	<groupId>cn.demo</groupId>
	<artifactId>JavademoIn7</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging> <!-- 打包成jar包 -->
	<name>JavademoIn7</name>
	<url>http://maven.apache.org</url>
  
	<build>
		<finalName>JavademoIn7</finalName>
		<plugins>
			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${compiler.source}</source>
					<target>${compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			
	<!-- 检测代码风格的插件 checkstyle（要在项目根目录下配置规则文件checkstyle.xml），然后使用mvn checkstyle::check命令验证-->
	<plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-checkstyle-plugin</artifactId>
       <version>3.0.0</version>
       <executions>
         <execution>
           <id>validate</id>
           <phase>validate</phase>
           <configuration>
             <encoding>UTF-8</encoding>
             <consoleOutput>true</consoleOutput>
             <failsOnError>true</failsOnError>
             <linkXRef>false</linkXRef>
           </configuration>
           <goals>
             <goal>check</goal>
           </goals>
         </execution>
       </executions>
     </plugin>
			
			<!-- 指定执行的主类（main方法所在的类）-->
			<plugin>  
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-jar-plugin</artifactId>  
                <version>2.6</version>  
                <configuration>  
                    <archive>  
                    <!-- 添加index则不从mainfest中读取classpath，而是从Index.list中读取 -->  
					<!-- <index>true</index> -->  
                        <manifest>  
                            <mainClass>cn.demo.JavademoIn7.application.ApplicationMain</mainClass>  
                        </manifest>  
                       
                    </archive>  
                </configuration>  
            </plugin>  
			
			<!-- 将执行项目的脚本文件一起打包 -->
			 <plugin>
               <groupId>org.apache.maven.plugins</groupId> 
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4.1</version>
                <executions>
                    <execution>
                        <id>${project.version}</id><!--名字任意 -->
                        <phase>package</phase>   <!-- 绑定到package生命周期阶段上 -->
                        <goals>
                            <goal>single</goal>   <!-- 只运行一次 -->   
                        </goals>
                        
                        <configuration>
                            <descriptors>   <!--描述文件路径--> 
                                <descriptor>src/main/resources/script.xml</descriptor>
                            </descriptors>
                            <!--这样配置后，mvn deploy不会把assembly打的zip包上传到nexus-->
                            <attach>false</attach>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			
		<!-- findbugs插件 ：静态检查代码的错误-->
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>findbugs-maven-plugin</artifactId>
            <version>3.0.4</version>
            <configuration>
                <!-- 设置分析工作的等级，可以为Min、Default和Max -->
                <effort>Low</effort>
                <!-- Low、Medium和High (Low最严格) -->
                <threshold>Medium</threshold>
                <failOnError>true</failOnError>
                <includeTests>true</includeTests>
                <!--findbugs需要忽略的错误的配置文件-->
               <!--  <excludeFilterFile>compile.bat</excludeFilterFile> -->
            </configuration> 
            <executions>
                <execution>
                    <id>run-findbugs</id>
                    <!-- 在install 阶段触发执行findbugs检查，比如执行 mvn clean package-->
                    <phase>install</phase>  
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
        
		<!--检测代码覆盖率的插件 jacoco-->
		 <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.8</version>
                <executions>
                    <execution>
                    	<id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                  		<id>check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
                
                <!-- Configuration 里面写配置信息 -->
                <configuration>
                <!-- rules里面指定覆盖规则 -->
                <rules>
				  <rule implementation="org.jacoco.maven.RuleConfiguration">
				    <element>BUNDLE</element>
				    <limits>
				   	  <!-- 指定方法覆盖到80% -->
				      <limit implementation="org.jacoco.report.check.Limit">
				        <counter>METHOD</counter>
				        <value>COVEREDRATIO</value>
				        <minimum>0.50</minimum>
				      </limit>
				        <!-- 指定指令覆盖到80% -->
				      <limit implementation="org.jacoco.report.check.Limit">
				        <counter>INSTRUCTION</counter>
				        <value>COVEREDRATIO</value>
				        <minimum>0.40</minimum>
				      </limit>
				       <!-- 指定行覆盖到80% -->
				      <limit implementation="org.jacoco.report.check.Limit">
				        <counter>LINE</counter>
				        <value>COVEREDRATIO</value>
				        <minimum>0.40</minimum>
				      </limit>
				      <!-- 指定类覆盖到100%，不能遗失任何类 -->
				      <limit implementation="org.jacoco.report.check.Limit">
				        <counter>CLASS</counter>
				        <value>MISSEDCOUNT</value>
       			 		<maximum>0</maximum>
				      </limit>
				      
				    </limits>
				  </rule>
				</rules>
				</configuration>
            </plugin>
			
	</plugins>
	</build>
	
	<reporting>
		<plugins>
			<plugin>
			   <groupId>org.apache.maven.plugins</groupId>
			   <artifactId>maven-checkstyle-plugin</artifactId>
			   <version>3.0.0</version>
			</plugin>
		</plugins>
	</reporting>
	<properties>
		<checkstyle.config.location>checkstyle.xml</checkstyle.config.location>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<compiler.source>1.7</compiler.source>
		<compiler.target>1.7</compiler.target>
		<junit.version>4.12</junit.version>
	</properties>

	<dependencies>
		<dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.7.8</version>
        </dependency>
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-clean-plugin</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>		
</project>
